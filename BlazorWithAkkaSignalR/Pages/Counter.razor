@page "/counter"
@using Akka.Actor
@using BlazorWithAkkaSignalR.Actors
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject Akka.Hosting.ActorRegistry ActorRegistry
        
@implements IAsyncDisposable

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" disabled="@(!IsConnected)" @onclick="IncrementCountInformViaSignalR">Increment and Inform via SignalR</button>
<button class="btn btn-primary" @onclick="IncrementCountInformViaActor">Increment and Inform via Actor</button>

@code {
    private int currentCount = 0;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/counterhub"))
            .Build();

        await hubConnection.StartAsync();
    }

    private async Task IncrementCountInformViaSignalR()
    {
        currentCount++;
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("IncrementCounter");
        }
    }

    private void IncrementCountInformViaActor()
    {
        var _questActor = ActorRegistry.Get<CounterActor>();
        _questActor.Tell(new CounterActor.IncrementCounter("via button click"), ActorRefs.NoSender);

        currentCount++;
    }
    
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
